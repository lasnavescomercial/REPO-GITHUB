name: Build Catalog

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      excel_path:
        description: 'Excel path (default: data/RESUMEN_CATALOGO.xlsx)'
        required: false
        default: 'data/RESUMEN_CATALOGO.xlsx'
      provider_contains:
        description: 'Filtrar por "Proveedor" (p.ej. FLUIDRA). Vacío = todas'
        required: false
        default: 'FLUIDRA'

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      GOOGLE_CSE_KEY: ${{ secrets.GOOGLE_CSE_KEY }}
      GOOGLE_CSE_CX:  ${{ secrets.GOOGLE_CSE_CX }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install requirements
        run: pip install -r requirements.txt

      - name: Check required secrets
        run: |
          if [ -z "${GOOGLE_CSE_KEY}" ]; then echo "ERROR: GOOGLE_CSE_KEY is missing"; exit 1; fi
          if [ -z "${GOOGLE_CSE_CX}" ]; then echo "ERROR: GOOGLE_CSE_CX is missing"; exit 1; fi
          echo "OK: both secrets are present"

      # ---------- NUEVO: crear SUBSET solo con filas cuyo Proveedor contiene X ----------
      - name: Make provider subset (only rows that match)
        env:
          EXCEL_IN: ${{ github.event.inputs.excel_path || 'data/RESUMEN_CATALOGO.xlsx' }}
          PROV:     ${{ github.event.inputs.provider_contains }}
        run: |
          python - << 'PY'
          import pandas as pd, os, re, unicodedata, sys
          def norm(s):
              s = str(s or '').upper()
              s = unicodedata.normalize('NFKD', s)
              s = ''.join(ch for ch in s if not unicodedata.combining(ch))
              return re.sub(r'[^A-Z0-9]+',' ', s).strip()
          excel_in = os.environ['EXCEL_IN']
          prov     = os.environ.get('PROV','').strip()
          df = pd.read_excel(excel_in)
          if not prov:
              df2 = df.copy()
              note = '(sin filtro)'
          else:
              nf = norm(prov)
              df2 = df[df['Proveedor'].apply(lambda x: nf in norm(x))]
              note = f'(filtro="{prov}")'
          print(f"[INFO] Subset {note}: {len(df2)}/{len(df)} filas.")
          # dump los primeros 10 proveedores para ver qué hay realmente
          print("[INFO] Primeros proveedores en subset:")
          print(df2['Proveedor'].head(10).to_string(index=False))
          os.makedirs('data', exist_ok=True)
          df2.to_excel('data/RESUMEN_CATALOGO_subset.xlsx', index=False)
          PY

      # ---------- Enriquecer SOLO el subset ----------
      - name: Enrich URLs (subset)
        run: |
          python scripts/enrich_urls.py \
            --excel  "data/RESUMEN_CATALOGO_subset.xlsx" \
            --out    "data/RESUMEN_CATALOGO_READY.xlsx" \
            --report "data/ENRICHMENT_REPORT.csv" \
            --sleep-ms 1100 \
            --provider-contains "${{ github.event.inputs.provider_contains }}"

      - name: Upload enriched Excel (for debug)
        uses: actions/upload-artifact@v4
        with:
          name: RESUMEN_CATALOGO_READY
          path: data/RESUMEN_CATALOGO_READY.xlsx

      - name: Upload enrichment report (for debug)
        uses: actions/upload-artifact@v4
        with:
          name: ENRICHMENT_REPORT
          path: data/ENRICHMENT_REPORT.csv

      # ---------- Descargar SOLO del subset enriquecido ----------
      - name: Run downloader
        run: |
          python scripts/download_catalog.py \
            --excel "data/RESUMEN_CATALOGO_READY.xlsx" \
            --provider-contains "${{ github.event.inputs.provider_contains }}"

      - name: Upload artifact (CATALOGO.zip)
        uses: actions/upload-artifact@v4
        with:
          name: CATALOGO_ZIP
          path: CATALOGO.zip

      - name: Commit output folder
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A output || true
          git commit -m "Output catalog $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "No changes to commit"
          git push
